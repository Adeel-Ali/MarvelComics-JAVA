/*
 * MarvelComicsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.marvel.gateway.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;

import com.marvel.gateway.*;
import com.marvel.gateway.models.*;
import com.marvel.gateway.exceptions.*;
import com.marvel.gateway.http.client.HttpClient;
import com.marvel.gateway.http.client.HttpContext;
import com.marvel.gateway.http.request.HttpRequest;
import com.marvel.gateway.http.response.HttpResponse;
import com.marvel.gateway.http.response.HttpStringResponse;
import com.marvel.gateway.http.client.APICallBack;
import com.marvel.gateway.controllers.syncwrapper.APICallBackCatcher;

public class SeriesController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static SeriesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the SeriesController class 
     */
    public static SeriesController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new SeriesController();
            }
        }
        return instance;
    }

    /**
     * Fetches lists of characters filtered by a series id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @param    name    Optional parameter: Return only characters matching the specified full character name (e.g. Spider-Man).
     * @param    nameStartsWith    Optional parameter: Return characters with names that begin with the specified string (e.g. Sp).
     * @param    modifiedSince    Optional parameter: Return only characters which have been modified since the specified date.
     * @param    comics    Optional parameter: Return only characters which appear in the specified comics (accepts a comma-separated list of ids).
     * @param    events    Optional parameter: Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).
     * @param    stories    Optional parameter: Return only characters which appear the specified stories (accepts a comma-separated list of ids).
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "name", "modified", "-name", "-modified")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the CharacterDataWrapper response from the API call 
     */
    public CharacterDataWrapper getSeriesCharacterWrapper(
                final String seriesId,
                final String name,
                final String nameStartsWith,
                final String modifiedSince,
                final String comics,
                final String events,
                final String stories,
                final String orderBy,
                final String limit,
                final String offset
    ) throws Throwable {
        APICallBackCatcher<CharacterDataWrapper> callback = new APICallBackCatcher<CharacterDataWrapper>();
        getSeriesCharacterWrapperAsync(seriesId, name, nameStartsWith, modifiedSince, comics, events, stories, orderBy, limit, offset, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetches lists of characters filtered by a series id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @param    name    Optional parameter: Return only characters matching the specified full character name (e.g. Spider-Man).
     * @param    nameStartsWith    Optional parameter: Return characters with names that begin with the specified string (e.g. Sp).
     * @param    modifiedSince    Optional parameter: Return only characters which have been modified since the specified date.
     * @param    comics    Optional parameter: Return only characters which appear in the specified comics (accepts a comma-separated list of ids).
     * @param    events    Optional parameter: Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).
     * @param    stories    Optional parameter: Return only characters which appear the specified stories (accepts a comma-separated list of ids).
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "name", "modified", "-name", "-modified")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the void response from the API call 
     */
    public void getSeriesCharacterWrapperAsync(
                final String seriesId,
                final String name,
                final String nameStartsWith,
                final String modifiedSince,
                final String comics,
                final String events,
                final String stories,
                final String orderBy,
                final String limit,
                final String offset,
                final APICallBack<CharacterDataWrapper> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/series/{seriesId}/characters");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5681944883318403554L;
            {
                    put( "seriesId", seriesId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5726513618949124711L;
            {
                    put( "name", name );
                    put( "nameStartsWith", nameStartsWith );
                    put( "modifiedSince", modifiedSince );
                    put( "comics", comics );
                    put( "events", events );
                    put( "stories", stories );
                    put( "orderBy", orderBy );
                    put( "limit", limit );
                    put( "offset", offset );
                    put( "apikey", Configuration.apikey );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5514683101777615479L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "referer", Configuration.referer );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 409)
                                throw new APIException("Limit greater than 100.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CharacterDataWrapper _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CharacterDataWrapper>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetches lists of comics filtered by a series id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @param    format    Optional parameter: Filter by the issue format (e.g. comic, digital comic, hardcover). (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")
     * @param    formatType    Optional parameter: Filter by the issue format type (comic or collection).
     * @param    noVariants    Optional parameter: Exclude variant comics from the result set. (Acceptable values are: "true")
     * @param    dateDescriptor    Optional parameter: Return comics within a predefined date range.
     * @param    dateRange    Optional parameter: Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.
     * @param    title    Optional parameter: Return only issues in series whose title matches the input.
     * @param    titleStartsWith    Optional parameter: Return only issues in series whose title starts with the input.
     * @param    startYear    Optional parameter: Return only issues in series whose start year matches the input.
     * @param    issueNumber    Optional parameter: Return only issues in series whose issue number matches the input.
     * @param    diamondCode    Optional parameter: Filter by diamond code.
     * @param    digitalId    Optional parameter: Filter by digital comic id.
     * @param    upc    Optional parameter: Filter by UPC.
     * @param    isbn    Optional parameter: Filter by ISBN.
     * @param    ean    Optional parameter: Filter by EAN.
     * @param    issn    Optional parameter: Filter by ISSN.
     * @param    hasDigitalIssue    Optional parameter: Include only results which are available digitally. (Acceptable values are: "true")
     * @param    modifiedSince    Optional parameter: Return only comics which have been modified since the specified date.
     * @param    creators    Optional parameter: Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).
     * @param    characters    Optional parameter: Return only comics which feature the specified characters (accepts a comma-separated list of ids).
     * @param    events    Optional parameter: Return only comics which take place in the specified events (accepts a comma-separated list of ids).
     * @param    stories    Optional parameter: Return only comics which contain the specified stories (accepts a comma-separated list of ids).
     * @param    sharedAppearances    Optional parameter: Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).
     * @param    collaborators    Optional parameter: Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "focDate", "onsaleDate", "title", "issueNumber", "modified", "-focDate", "-onsaleDate", "-title", "-issueNumber", "-modified")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the ComicDataWrapper response from the API call 
     */
    public ComicDataWrapper getComicsCollectionBySeriesId(
                final String seriesId,
                final String format,
                final FormatTypeEnum formatType,
                final String noVariants,
                final DateDescriptorEnum dateDescriptor,
                final String dateRange,
                final String title,
                final String titleStartsWith,
                final String startYear,
                final String issueNumber,
                final String diamondCode,
                final String digitalId,
                final String upc,
                final String isbn,
                final String ean,
                final String issn,
                final String hasDigitalIssue,
                final String modifiedSince,
                final String creators,
                final String characters,
                final String events,
                final String stories,
                final String sharedAppearances,
                final String collaborators,
                final String orderBy,
                final String limit,
                final String offset
    ) throws Throwable {
        APICallBackCatcher<ComicDataWrapper> callback = new APICallBackCatcher<ComicDataWrapper>();
        getComicsCollectionBySeriesIdAsync(seriesId, format, formatType, noVariants, dateDescriptor, dateRange, title, titleStartsWith, startYear, issueNumber, diamondCode, digitalId, upc, isbn, ean, issn, hasDigitalIssue, modifiedSince, creators, characters, events, stories, sharedAppearances, collaborators, orderBy, limit, offset, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetches lists of comics filtered by a series id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @param    format    Optional parameter: Filter by the issue format (e.g. comic, digital comic, hardcover). (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")
     * @param    formatType    Optional parameter: Filter by the issue format type (comic or collection).
     * @param    noVariants    Optional parameter: Exclude variant comics from the result set. (Acceptable values are: "true")
     * @param    dateDescriptor    Optional parameter: Return comics within a predefined date range.
     * @param    dateRange    Optional parameter: Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.
     * @param    title    Optional parameter: Return only issues in series whose title matches the input.
     * @param    titleStartsWith    Optional parameter: Return only issues in series whose title starts with the input.
     * @param    startYear    Optional parameter: Return only issues in series whose start year matches the input.
     * @param    issueNumber    Optional parameter: Return only issues in series whose issue number matches the input.
     * @param    diamondCode    Optional parameter: Filter by diamond code.
     * @param    digitalId    Optional parameter: Filter by digital comic id.
     * @param    upc    Optional parameter: Filter by UPC.
     * @param    isbn    Optional parameter: Filter by ISBN.
     * @param    ean    Optional parameter: Filter by EAN.
     * @param    issn    Optional parameter: Filter by ISSN.
     * @param    hasDigitalIssue    Optional parameter: Include only results which are available digitally. (Acceptable values are: "true")
     * @param    modifiedSince    Optional parameter: Return only comics which have been modified since the specified date.
     * @param    creators    Optional parameter: Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).
     * @param    characters    Optional parameter: Return only comics which feature the specified characters (accepts a comma-separated list of ids).
     * @param    events    Optional parameter: Return only comics which take place in the specified events (accepts a comma-separated list of ids).
     * @param    stories    Optional parameter: Return only comics which contain the specified stories (accepts a comma-separated list of ids).
     * @param    sharedAppearances    Optional parameter: Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).
     * @param    collaborators    Optional parameter: Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "focDate", "onsaleDate", "title", "issueNumber", "modified", "-focDate", "-onsaleDate", "-title", "-issueNumber", "-modified")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the void response from the API call 
     */
    public void getComicsCollectionBySeriesIdAsync(
                final String seriesId,
                final String format,
                final FormatTypeEnum formatType,
                final String noVariants,
                final DateDescriptorEnum dateDescriptor,
                final String dateRange,
                final String title,
                final String titleStartsWith,
                final String startYear,
                final String issueNumber,
                final String diamondCode,
                final String digitalId,
                final String upc,
                final String isbn,
                final String ean,
                final String issn,
                final String hasDigitalIssue,
                final String modifiedSince,
                final String creators,
                final String characters,
                final String events,
                final String stories,
                final String sharedAppearances,
                final String collaborators,
                final String orderBy,
                final String limit,
                final String offset,
                final APICallBack<ComicDataWrapper> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/series/{seriesId}/comics");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5035737201771157106L;
            {
                    put( "seriesId", seriesId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5549383894229091528L;
            {
                    put( "format", format );
                    put( "formatType", (formatType != null) ? formatType.value() : null );
                    put( "noVariants", noVariants );
                    put( "dateDescriptor", (dateDescriptor != null) ? dateDescriptor.value() : null );
                    put( "dateRange", dateRange );
                    put( "title", title );
                    put( "titleStartsWith", titleStartsWith );
                    put( "startYear", startYear );
                    put( "issueNumber", issueNumber );
                    put( "diamondCode", diamondCode );
                    put( "digitalId", digitalId );
                    put( "upc", upc );
                    put( "isbn", isbn );
                    put( "ean", ean );
                    put( "issn", issn );
                    put( "hasDigitalIssue", hasDigitalIssue );
                    put( "modifiedSince", modifiedSince );
                    put( "creators", creators );
                    put( "characters", characters );
                    put( "events", events );
                    put( "stories", stories );
                    put( "sharedAppearances", sharedAppearances );
                    put( "collaborators", collaborators );
                    put( "orderBy", orderBy );
                    put( "limit", limit );
                    put( "offset", offset );
                    put( "apikey", Configuration.apikey );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4663885853694913734L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "referer", Configuration.referer );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 409)
                                throw new APIException("Limit greater than 100.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ComicDataWrapper _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ComicDataWrapper>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetches lists of creators filtered by a series id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @param    firstName    Optional parameter: Filter by creator first name (e.g. brian).
     * @param    middleName    Optional parameter: Filter by creator middle name (e.g. Michael).
     * @param    lastName    Optional parameter: Filter by creator last name (e.g. Bendis).
     * @param    suffix    Optional parameter: Filter by suffix or honorific (e.g. Jr., Sr.).
     * @param    nameStartsWith    Optional parameter: Filter by creator names that match critera (e.g. B, St L).
     * @param    firstNameStartsWith    Optional parameter: Filter by creator first names that match critera (e.g. B, St L).
     * @param    middleNameStartsWith    Optional parameter: Filter by creator middle names that match critera (e.g. Mi).
     * @param    lastNameStartsWith    Optional parameter: Filter by creator last names that match critera (e.g. Ben).
     * @param    modifiedSince    Optional parameter: Return only creators which have been modified since the specified date.
     * @param    comics    Optional parameter: Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).
     * @param    events    Optional parameter: Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).
     * @param    stories    Optional parameter: Return only creators who worked on the specified stories (accepts a comma-separated list of ids).
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "lastName", "firstName", "middleName", "suffix", "modified", "-lastName", "-firstName", "-middleName", "-suffix", "-modified")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the CreatorDataWrapper response from the API call 
     */
    public CreatorDataWrapper getCreatorCollectionBySeriesId(
                final String seriesId,
                final String firstName,
                final String middleName,
                final String lastName,
                final String suffix,
                final String nameStartsWith,
                final String firstNameStartsWith,
                final String middleNameStartsWith,
                final String lastNameStartsWith,
                final String modifiedSince,
                final String comics,
                final String events,
                final String stories,
                final String orderBy,
                final String limit,
                final String offset
    ) throws Throwable {
        APICallBackCatcher<CreatorDataWrapper> callback = new APICallBackCatcher<CreatorDataWrapper>();
        getCreatorCollectionBySeriesIdAsync(seriesId, firstName, middleName, lastName, suffix, nameStartsWith, firstNameStartsWith, middleNameStartsWith, lastNameStartsWith, modifiedSince, comics, events, stories, orderBy, limit, offset, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetches lists of creators filtered by a series id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @param    firstName    Optional parameter: Filter by creator first name (e.g. brian).
     * @param    middleName    Optional parameter: Filter by creator middle name (e.g. Michael).
     * @param    lastName    Optional parameter: Filter by creator last name (e.g. Bendis).
     * @param    suffix    Optional parameter: Filter by suffix or honorific (e.g. Jr., Sr.).
     * @param    nameStartsWith    Optional parameter: Filter by creator names that match critera (e.g. B, St L).
     * @param    firstNameStartsWith    Optional parameter: Filter by creator first names that match critera (e.g. B, St L).
     * @param    middleNameStartsWith    Optional parameter: Filter by creator middle names that match critera (e.g. Mi).
     * @param    lastNameStartsWith    Optional parameter: Filter by creator last names that match critera (e.g. Ben).
     * @param    modifiedSince    Optional parameter: Return only creators which have been modified since the specified date.
     * @param    comics    Optional parameter: Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).
     * @param    events    Optional parameter: Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).
     * @param    stories    Optional parameter: Return only creators who worked on the specified stories (accepts a comma-separated list of ids).
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "lastName", "firstName", "middleName", "suffix", "modified", "-lastName", "-firstName", "-middleName", "-suffix", "-modified")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the void response from the API call 
     */
    public void getCreatorCollectionBySeriesIdAsync(
                final String seriesId,
                final String firstName,
                final String middleName,
                final String lastName,
                final String suffix,
                final String nameStartsWith,
                final String firstNameStartsWith,
                final String middleNameStartsWith,
                final String lastNameStartsWith,
                final String modifiedSince,
                final String comics,
                final String events,
                final String stories,
                final String orderBy,
                final String limit,
                final String offset,
                final APICallBack<CreatorDataWrapper> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/series/{seriesId}/creators");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5569282189797903581L;
            {
                    put( "seriesId", seriesId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4734548159476418523L;
            {
                    put( "firstName", firstName );
                    put( "middleName", middleName );
                    put( "lastName", lastName );
                    put( "suffix", suffix );
                    put( "nameStartsWith", nameStartsWith );
                    put( "firstNameStartsWith", firstNameStartsWith );
                    put( "middleNameStartsWith", middleNameStartsWith );
                    put( "lastNameStartsWith", lastNameStartsWith );
                    put( "modifiedSince", modifiedSince );
                    put( "comics", comics );
                    put( "events", events );
                    put( "stories", stories );
                    put( "orderBy", orderBy );
                    put( "limit", limit );
                    put( "offset", offset );
                    put( "apikey", Configuration.apikey );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5473830028662877308L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "referer", Configuration.referer );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 409)
                                throw new APIException("Limit greater than 100.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CreatorDataWrapper _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CreatorDataWrapper>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetches lists of events filtered by a series id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @param    name    Optional parameter: Filter the event list by name.
     * @param    nameStartsWith    Optional parameter: Return events with names that begin with the specified string (e.g. Sp).
     * @param    modifiedSince    Optional parameter: Return only events which have been modified since the specified date.
     * @param    creators    Optional parameter: Return only events which feature work by the specified creators (accepts a comma-separated list of ids).
     * @param    characters    Optional parameter: Return only events which feature the specified characters (accepts a comma-separated list of ids).
     * @param    comics    Optional parameter: Return only events which take place in the specified comics (accepts a comma-separated list of ids).
     * @param    stories    Optional parameter: Return only events which contain the specified stories (accepts a comma-separated list of ids).
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "name", "startDate", "modified", "-name", "-startDate", "-modified")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the EventDataWrapper response from the API call 
     */
    public EventDataWrapper getEventsCollectionBySeriesId(
                final String seriesId,
                final String name,
                final String nameStartsWith,
                final String modifiedSince,
                final String creators,
                final String characters,
                final String comics,
                final String stories,
                final String orderBy,
                final String limit,
                final String offset
    ) throws Throwable {
        APICallBackCatcher<EventDataWrapper> callback = new APICallBackCatcher<EventDataWrapper>();
        getEventsCollectionBySeriesIdAsync(seriesId, name, nameStartsWith, modifiedSince, creators, characters, comics, stories, orderBy, limit, offset, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetches lists of events filtered by a series id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @param    name    Optional parameter: Filter the event list by name.
     * @param    nameStartsWith    Optional parameter: Return events with names that begin with the specified string (e.g. Sp).
     * @param    modifiedSince    Optional parameter: Return only events which have been modified since the specified date.
     * @param    creators    Optional parameter: Return only events which feature work by the specified creators (accepts a comma-separated list of ids).
     * @param    characters    Optional parameter: Return only events which feature the specified characters (accepts a comma-separated list of ids).
     * @param    comics    Optional parameter: Return only events which take place in the specified comics (accepts a comma-separated list of ids).
     * @param    stories    Optional parameter: Return only events which contain the specified stories (accepts a comma-separated list of ids).
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "name", "startDate", "modified", "-name", "-startDate", "-modified")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the void response from the API call 
     */
    public void getEventsCollectionBySeriesIdAsync(
                final String seriesId,
                final String name,
                final String nameStartsWith,
                final String modifiedSince,
                final String creators,
                final String characters,
                final String comics,
                final String stories,
                final String orderBy,
                final String limit,
                final String offset,
                final APICallBack<EventDataWrapper> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/series/{seriesId}/events");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5739120860584836840L;
            {
                    put( "seriesId", seriesId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4844728108087820795L;
            {
                    put( "name", name );
                    put( "nameStartsWith", nameStartsWith );
                    put( "modifiedSince", modifiedSince );
                    put( "creators", creators );
                    put( "characters", characters );
                    put( "comics", comics );
                    put( "stories", stories );
                    put( "orderBy", orderBy );
                    put( "limit", limit );
                    put( "offset", offset );
                    put( "apikey", Configuration.apikey );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5589734885227912573L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "referer", Configuration.referer );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 409)
                                throw new APIException("Limit greater than 100.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            EventDataWrapper _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<EventDataWrapper>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetches lists of stories filtered by a series id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @param    modifiedSince    Optional parameter: Return only stories which have been modified since the specified date.
     * @param    comics    Optional parameter: Return only stories contained in the specified (accepts a comma-separated list of ids).
     * @param    events    Optional parameter: Return only stories which take place during the specified events (accepts a comma-separated list of ids).
     * @param    creators    Optional parameter: Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).
     * @param    characters    Optional parameter: Return only stories which feature the specified characters (accepts a comma-separated list of ids).
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "id", "modified", "-id", "-modified")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the StoryDataWrapper response from the API call 
     */
    public StoryDataWrapper getSeriesStoryCollection(
                final String seriesId,
                final String modifiedSince,
                final String comics,
                final String events,
                final String creators,
                final String characters,
                final String orderBy,
                final String limit,
                final String offset
    ) throws Throwable {
        APICallBackCatcher<StoryDataWrapper> callback = new APICallBackCatcher<StoryDataWrapper>();
        getSeriesStoryCollectionAsync(seriesId, modifiedSince, comics, events, creators, characters, orderBy, limit, offset, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetches lists of stories filtered by a series id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @param    modifiedSince    Optional parameter: Return only stories which have been modified since the specified date.
     * @param    comics    Optional parameter: Return only stories contained in the specified (accepts a comma-separated list of ids).
     * @param    events    Optional parameter: Return only stories which take place during the specified events (accepts a comma-separated list of ids).
     * @param    creators    Optional parameter: Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).
     * @param    characters    Optional parameter: Return only stories which feature the specified characters (accepts a comma-separated list of ids).
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "id", "modified", "-id", "-modified")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the void response from the API call 
     */
    public void getSeriesStoryCollectionAsync(
                final String seriesId,
                final String modifiedSince,
                final String comics,
                final String events,
                final String creators,
                final String characters,
                final String orderBy,
                final String limit,
                final String offset,
                final APICallBack<StoryDataWrapper> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/series/{seriesId}/stories");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5391558756094179078L;
            {
                    put( "seriesId", seriesId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5743706498363949031L;
            {
                    put( "modifiedSince", modifiedSince );
                    put( "comics", comics );
                    put( "events", events );
                    put( "creators", creators );
                    put( "characters", characters );
                    put( "orderBy", orderBy );
                    put( "limit", limit );
                    put( "offset", offset );
                    put( "apikey", Configuration.apikey );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5715119053210519984L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "referer", Configuration.referer );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 409)
                                throw new APIException("Limit greater than 100.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            StoryDataWrapper _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<StoryDataWrapper>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetches a single comic series by id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @return    Returns the Series response from the API call 
     */
    public Series getSeriesIndividual(
                final String seriesId
    ) throws Throwable {
        APICallBackCatcher<Series> callback = new APICallBackCatcher<Series>();
        getSeriesIndividualAsync(seriesId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetches a single comic series by id.
     * @param    seriesId    Required parameter: Filter by series title.
     * @return    Returns the void response from the API call 
     */
    public void getSeriesIndividualAsync(
                final String seriesId,
                final APICallBack<Series> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/series/{seriesId}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4899055763031996747L;
            {
                    put( "seriesId", seriesId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5148248048592563694L;
            {
                    put( "apikey", Configuration.apikey );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5312037230850489227L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "referer", Configuration.referer );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 404)
                                throw new APIException("Series not found.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Series _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Series>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetches lists of series.
     * @param    title    Optional parameter: Return only series matching the specified title.
     * @param    titleStartsWith    Optional parameter: Return series with titles that begin with the specified string (e.g. Sp).
     * @param    startYear    Optional parameter: Return only series matching the specified start year.
     * @param    modifiedSince    Optional parameter: Return only series which have been modified since the specified date.
     * @param    comics    Optional parameter: Return only series which contain the specified comics (accepts a comma-separated list of ids).
     * @param    stories    Optional parameter: Return only series which contain the specified stories (accepts a comma-separated list of ids).
     * @param    events    Optional parameter: Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).
     * @param    creators    Optional parameter: Return only series which feature work by the specified creators (accepts a comma-separated list of ids).
     * @param    characters    Optional parameter: Return only series which feature the specified characters (accepts a comma-separated list of ids).
     * @param    seriesType    Optional parameter: Filter the series by publication frequency type. (Acceptable values are: "collection", "one shot", "limited", "ongoing")
     * @param    contains    Optional parameter: Return only series containing one or more comics with the specified format. (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "title", "modified", "startYear", "-title", "-modified", "-startYear")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the SeriesDataWrapper response from the API call 
     */
    public SeriesDataWrapper getSeriesCollection(
                final String title,
                final String titleStartsWith,
                final String startYear,
                final String modifiedSince,
                final String comics,
                final String stories,
                final String events,
                final String creators,
                final String characters,
                final String seriesType,
                final String contains,
                final String orderBy,
                final String limit,
                final String offset
    ) throws Throwable {
        APICallBackCatcher<SeriesDataWrapper> callback = new APICallBackCatcher<SeriesDataWrapper>();
        getSeriesCollectionAsync(title, titleStartsWith, startYear, modifiedSince, comics, stories, events, creators, characters, seriesType, contains, orderBy, limit, offset, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetches lists of series.
     * @param    title    Optional parameter: Return only series matching the specified title.
     * @param    titleStartsWith    Optional parameter: Return series with titles that begin with the specified string (e.g. Sp).
     * @param    startYear    Optional parameter: Return only series matching the specified start year.
     * @param    modifiedSince    Optional parameter: Return only series which have been modified since the specified date.
     * @param    comics    Optional parameter: Return only series which contain the specified comics (accepts a comma-separated list of ids).
     * @param    stories    Optional parameter: Return only series which contain the specified stories (accepts a comma-separated list of ids).
     * @param    events    Optional parameter: Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).
     * @param    creators    Optional parameter: Return only series which feature work by the specified creators (accepts a comma-separated list of ids).
     * @param    characters    Optional parameter: Return only series which feature the specified characters (accepts a comma-separated list of ids).
     * @param    seriesType    Optional parameter: Filter the series by publication frequency type. (Acceptable values are: "collection", "one shot", "limited", "ongoing")
     * @param    contains    Optional parameter: Return only series containing one or more comics with the specified format. (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")
     * @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "title", "modified", "startYear", "-title", "-modified", "-startYear")
     * @param    limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param    offset    Optional parameter: Skip the specified number of resources in the result set.
     * @return    Returns the void response from the API call 
     */
    public void getSeriesCollectionAsync(
                final String title,
                final String titleStartsWith,
                final String startYear,
                final String modifiedSince,
                final String comics,
                final String stories,
                final String events,
                final String creators,
                final String characters,
                final String seriesType,
                final String contains,
                final String orderBy,
                final String limit,
                final String offset,
                final APICallBack<SeriesDataWrapper> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/series");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5512041841720320145L;
            {
                    put( "title", title );
                    put( "titleStartsWith", titleStartsWith );
                    put( "startYear", startYear );
                    put( "modifiedSince", modifiedSince );
                    put( "comics", comics );
                    put( "stories", stories );
                    put( "events", events );
                    put( "creators", creators );
                    put( "characters", characters );
                    put( "seriesType", seriesType );
                    put( "contains", contains );
                    put( "orderBy", orderBy );
                    put( "limit", limit );
                    put( "offset", offset );
                    put( "apikey", Configuration.apikey );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5659970495538544973L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "referer", Configuration.referer );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 409)
                                throw new APIException("Limit greater than 100.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            SeriesDataWrapper _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<SeriesDataWrapper>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}