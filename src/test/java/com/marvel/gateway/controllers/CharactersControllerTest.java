/*
 * MarvelComicsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.marvel.gateway.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.marvel.gateway.models.*;
import com.marvel.gateway.exceptions.*;
import com.marvel.gateway.APIHelper;
import com.marvel.gateway.Configuration;
import com.marvel.gateway.testing.TestHelper;
import com.marvel.gateway.controllers.CharactersController;

import com.fasterxml.jackson.core.type.TypeReference;

public class CharactersControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static CharactersController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getCharacters();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Fetches lists of characters.
     * @throws Throwable
     */
    @Test
    public void testGetCharacterCollection() throws Throwable {
        // Parameters for the API call
        String name = null;
        String nameStartsWith = null;
        String modifiedSince = null;
        String comics = null;
        String series = null;
        String events = null;
        String stories = null;
        String orderBy = "name";
        String limit = null;
        String offset = null;

        // Set callback and perform API call
        CharacterDataWrapper result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getCharacterCollection(name, nameStartsWith, modifiedSince, comics, series, events, stories, orderBy, limit, offset);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

}
